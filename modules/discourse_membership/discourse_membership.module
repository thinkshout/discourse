<?php

/**
 * @file
 * Contains discourse membership module.
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Serialization\Json;
use Drupal\Core\Entity\EntityInterface;
use Drupal\user\Entity\User;
use Drupal\user\UserInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\group\Entity\GroupContentInterface;

/**
 * Implements hook_entity_base_field_info().
 */
function discourse_membership_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  // Add a 'discourse_groups_field' base field to all node types.
  if ($entity_type->id() === 'user') {
    $fields['discourse_user_field'] = BaseFieldDefinition::create('discourse_user_field')
      ->setLabel(t('Discourse User'))
      ->setDescription(t('Discourse User settings.'))
      ->setRevisionable(TRUE)
      ->setTranslatable(TRUE)
      ->setDisplayOptions('form', [
        'type' => 'discourse_user_widget',
        'weight' => 100,
      ])
      ->setDisplayConfigurable('form', TRUE);
  }

  return $fields;
}

/**
 * Implements hook_form_BASE_ID_alter().
 */
function discourse_membership_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // If discourse groups is enabled.
  if (isset($form['discourse_user_field'])) {
    $user = $form_state->getFormObject()->getEntity();
    // Checking edit form.
    if ($form_state->getFormObject()->getOperation() == 'edit') {
      if ($user->get('discourse_user_field')->push_to_discourse != 1) {
        // If push_to_discourse is not enabled.
        $form['discourse_user_field']['widget'][0]['push_to_discourse']['#default_value'] = 0;
      }
    }
    $form['actions']['submit']['#submit'][] = '_post_user_to_discourse';
  }
}

/**
 * Post user to discourse.
 */
function _post_user_to_discourse($form, FormStateInterface &$form_state) {
  $form_values = $form_state->getValues();
  $user = $form_state->getFormObject()->getEntity();
  $discourse_user_id = $user->get('discourse_user_field')->user_id;
  $post_condition = $discourse_user_id == NULL && $discourse_user_id !== '' && $form_values['discourse_user_field'][0]['push_to_discourse'] == 1;
  // New user.
  if ($post_condition) {
    // Create the discourse user.
    $created_user = discourse_membership_fetch_or_create_user($user);

    // Get user details and save it in discourse field of the user.
    $discourse_form_values = $form_values['discourse_user_field'];
    $discourse_form_values[0]['user_id'] = $created_user['id'];
    if (!empty($created_user['username'])) {
      $discourse_form_values[0]['username'] = $created_user['username'];
    }

    // Change the discourse_groups_field according to returned values.
    $user->set('discourse_user_field', $discourse_form_values);
    $user->save();
  }
}

/**
 * Implements hook_help().
 */
function discourse_membership_help($route_name, RouteMatchInterface $route_match) {
  $output = '';
  switch ($route_name) {
    // Main module help for the discourse module.
    case 'help.page.discourse':
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Discourse API and Membership integration.') . '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_entity_delete().
 */
function discourse_membership_entity_delete(EntityInterface $entity) {
  // @todo Do we need to delete users in discourse?
  switch ($entity->getEntityTypeId()) {
    // Act on group membership deletions.
    case 'group_content':
      if ($entity->getContentPlugin()->getPluginId() == 'group_membership') {
        // Get the group.
        $group = $entity->getGroup();
        // Check for discourse category id field value.
        if ($group->hasField('discourse_groups_field') && ($group_id = $group->get('discourse_groups_field')->group_id) && !empty($group_id)) {
          // Get the user.
          $user = $entity->get('entity_id')->entity;
          // Check for discourse user.
          $discourse_api_client = \Drupal::service('discourse.discourse_api_client');
          if (($discourse_username = $user->get('discourse_user_field')->username) && !empty($discourse_username)) {
            // Remove user from group.
            $discourse_api_client->removeUsersFromGroup($group_id, $discourse_username);
          }
        }
      }
      break;
  }
}

/**
 * Implements hook_entity_presave().
 */
function discourse_membership_entity_presave(EntityInterface $entity) {
  switch ($entity->getEntityTypeId()) {
    // Act on new group memberships.
    case 'group_content':
      /** @var \Drupal\group\Entity\GroupContentInterface $entity */
      discourse_membership_sync_membership($entity);
      break;
  }
}

/**
 * Sync a group membership entity to Discourse.
 *
 * @param \Drupal\group\Entity\GroupContentInterface $group_content
 *   The group membership entity.
 *
 * @return void
 */
function discourse_membership_sync_membership(GroupContentInterface $group_content) {
  if ($group_content->getContentPlugin()->getPluginId() != 'group_membership') {
    return;
  }

  $group = $group_content->getGroup();
  $group_id = $group->discourse_groups_field->group_id ?? NULL;
  // Check for discourse category id field value.
  if (!$group_id) {
    return;
  }

  $discourse_api_client = \Drupal::service('discourse.discourse_api_client');
  $user = $group_content->get('entity_id')->entity;
  $discourse_username = $user->get('discourse_user_field')->username;
  if ($discourse_username) {
    // The user exists in Discourse.
    $discourse_api_client->addUsersToGroup($group_id, $discourse_username);
  }
  else {
    // Create the discourse user.
    $created_user = discourse_membership_fetch_or_create_user($user);
    if ($created_user && !empty($created_user['id'])) {
      $username = $created_user['username'] ?? $user->getAccountName();
      $group_add_result = $discourse_api_client->addUsersToGroup($group_id, $username);
      // Save the discourse user values back to the Drupal user.
      $user->discourse_user_field->username = $username;
      $user->discourse_user_field->user_id = $created_user['id'];
      $user->discourse_user_field->push_to_discourse = 1;
      $user->save();
    }
  }
}

/**
 * Take a Drupal user and return a matching, potentially new Discourse user.
 *
 * @param \Drupal\user\UserInterface $account
 *   The Drupal user that will be used to look up or create the Discourse user.
 *
 * @return array|null
 */
function discourse_membership_fetch_or_create_user(UserInterface $account) {
  /** @var \Drupal\discourse\DiscourseApiClient $discourse_api_client */
  $discourse_api_client = \Drupal::service('discourse.discourse_api_client');
  $data = [
    'name' => $account->getAccountName(),
    'email' => $account->getEmail(),
    'password' => \Drupal::service('password_generator')->generate(10),
    'username' => substr(preg_replace("/[^A-Za-z0-9_\-\.]/", '', $account->getAccountName()), 0, 20),
    'active' => TRUE,
    'approved' => TRUE,
    'user_fields[1]' => TRUE,
  ];
  // Search discourse for the user, given the email.
  $existing_user = discourse_get_discourse_user_from_email($data['email']);
  if ($existing_user) {
    return $existing_user;
  }
  else {
    $new_user_result = Json::decode($discourse_api_client->createUser($data));
    if ($new_user_result['success']) {
      $new_user = discourse_get_discourse_user_from_email($data['email']);
      if ($new_user) {
        return $new_user;
      }
      elseif (isset($new_user_result['user_id'])) {
        // Sometimes the Discourse server won't load new users in queries, but
        // if we have a user ID we can at least provide a thin version:
        return ['id' => $new_user_result['user_id']];
      }
    }
  }
  return NULL;
}

/**
 * Get a discourse use from an email address.
 *
 * @param String $email
 *   The email address with which to look up the user in Discourse.
 *
 * @return array|null
 */
function discourse_get_discourse_user_from_email(String $email) {
  /** @var \Drupal\discourse\DiscourseApiClient $discourse_api_client */
  $discourse_api_client = \Drupal::service('discourse.discourse_api_client');
  $get_users = Json::decode($discourse_api_client->getUsers(1, [
    'show_emails' => TRUE,
    'filter' => $email,
  ]));
  // If user exists, return existing.
  if (!empty($get_users)) {
    return current($get_users);
  }
  return NULL;
}

/**
 * Implements hook_discourse_sso_parameters_alter().
 */
function discourse_membership_discourse_sso_parameters_alter(&$parameters) {
  // If a user is SSO'ing and including a "username" parameter, this acts as an
  // instruction to Discourse to update the Discourse username. That means we
  // need to update our username on file.
  if (empty($parameters['external_id']) || !is_numeric($parameters['external_id'])) {
    return;
  }
  $account = User::load($parameters['external_id']);
  if (empty($account) || empty($account->get('discourse_user_field'))) {
    return;
  }
  if (empty($account->discourse_user_field->username) || $account->discourse_user_field->username == $parameters['username']) {
    return;
  }
  $account->discourse_user_field->username = $parameters['username'];
  $account->save();
}
